# -------------------------------------------------------------
# 🧩 GitHub Actions Workflow for Python (Conda-based) - Fixed
# -------------------------------------------------------------
# Author: Phoenix Marie (refined)
# Purpose: CI pipeline for Python packages using Conda (robust)
# -------------------------------------------------------------
name: "🧠 Python Package (Conda CI)"

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]
  workflow_dispatch:

concurrency:
  group: "conda-ci-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build-linux:
    name: "🧩 Build, Lint & Test (Linux)"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ["3.10"]

    steps:
      - name: "🗂 Checkout code"
        uses: actions/checkout@v4

      # Install Miniconda and enable built-in caching support
      - name: "⚙️ Setup Miniconda"
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          python-version: ${{ matrix.python }}
          auto-activate-base: false
          cache: 'auto'                # enable conda package cache
          use-mamba: true              # faster package solve

      # Create or update the CI conda environment from environment.yml
      - name: "📦 Create / Update conda env (ci-env)"
        run: |
          if [ -f environment.yml ]; then
            echo "environment.yml found -> creating/updating 'ci-env'"
            mamba env create -f environment.yml -n ci-env || mamba env update -f environment.yml -n ci-env
          else
            echo "⚠️ environment.yml not found. Creating minimal env with pip and python."
            mamba create -n ci-env python=${{ matrix.python }} -y
          fi

      # Show environment info (diagnostics)
      - name: "🔍 Conda env info"
        run: |
          conda info
          conda env list
          conda run -n ci-env python --version

      # Install lint/test tools into the conda env if not present
      - name: "🧰 Ensure dev tools (flake8, pytest) are available"
        run: |
          conda run -n ci-env python -m pip install --upgrade pip
          # Install tools with conda when possible, fall back to pip
          if mamba list flake8 >/dev/null 2>&1; then
            echo "flake8 already available"
          else
            mamba install -n ci-env flake8 -y || conda run -n ci-env python -m pip install flake8
          fi
          if mamba list pytest >/dev/null 2>&1; then
            echo "pytest already available"
          else
            mamba install -n ci-env pytest -y || conda run -n ci-env python -m pip install pytest
          fi

      # Run formatter check (non-destructive)
      - name: "🎨 Check formatting (black/ruff optional)"
        run: |
          # If your project uses black or ruff, install and check here.
          # Example (uncomment if using black):
          # conda run -n ci-env python -m pip install black
          # conda run -n ci-env black --check .
          echo "No global formatter configured — skipping format check."

      # Lint (fail fast on syntax/critical issues)
      - name: "🎯 Lint with flake8 (critical errors fail)"
        run: |
          echo "Running flake8 (critical errors will fail the job)..."
          conda run -n ci-env flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          echo "Running flake8 (style warnings, non-fatal)..."
          conda run -n ci-env flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Run tests
      - name: "🧪 Run tests with pytest"
        run: |
          echo "Running pytest..."
          conda run -n ci-env pytest --maxfail=1 --disable-warnings -q

      # Optional: Save test artifacts (uncomment when needed)
      # - name: "📤 Upload test artifacts"
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: pytest-results
      #     path: test-results/

      - name: "✅ CI pipeline completed"
        run: echo "✅ Conda CI pipeline finished successfully!"
