# -------------------------------------------------------------
# 🚀 GitHub Actions Workflow — Python Package Auto-Publish (fixed)
# -------------------------------------------------------------
# Author: Phoenix Marie (refined)
# Purpose: Build and publish a Python package to PyPI when a
#          GitHub Release is published.
# Notes: Uses OIDC (no persistent PyPI token required) when project
#        is configured as a GitHub publisher on PyPI.
# -------------------------------------------------------------

name: "🧠 Upload Python Package to PyPI"

# Trigger when a release is published
on:
  release:
    types: [published]

# Minimum permissions for workflow (safer default)
permissions:
  contents: read           # required to check out code
  packages: write          # allow publishing packages (best practice)
  id-token: write          # required for OIDC-based publish (pypa action uses it)

concurrency:
  group: "pypi-publish-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build:
    name: 🏗 Build Distributions
    runs-on: ubuntu-latest
    outputs:
      dist-path: dist

    steps:
      - name: 🗂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"   # pin to a concrete major/minor if you prefer

      - name: 🧰 Install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel build twine

      - name: 🧱 Build distributions (sdist + wheel)
        run: |
          rm -rf dist/
          python -m build --sdist --wheel --outdir dist/
          ls -la dist

      - name: 🧾 Validate distributions with twine
        run: |
          if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
            echo "Checking distributions with twine..."
            python -m twine check dist/* || (echo "Twine check failed" && exit 1)
          else
            echo "❌ No distributions found in dist/ — build failed" && exit 1
          fi

      - name: 📦 Upload built distributions as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  publish:
    name: 🚀 Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
      id-token: write

    environment:
      name: pypi
      url: https://pypi.org/project/YOURPROJECTNAME/   # update your project URL

    steps:
      - name: 🔽 Download built distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: 🔐 Ensure dist folder has artifacts
        run: |
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "❌ dist/ is empty — nothing to publish" && exit 1
          fi
          echo "✅ Found artifacts:"
          ls -la dist

      - name: 🚀 Publish distributions to PyPI (via OIDC)
        # pypa/gh-action-pypi-publish supports OIDC when configured as publisher on PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          # Optional: if you want to publish to TestPyPI instead for safety,
          # uncomment the following line and comment the production publish.
          # repository-url: https://test.pypi.org/legacy/
          # skip-existing: true

      - name: ✅ Publish confirmation
        run: echo "✅ Package published to PyPI (or TestPyPI if configured)."
